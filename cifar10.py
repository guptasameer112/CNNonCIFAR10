# -*- coding: utf-8 -*-
"""CIFAR10.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DaKVGksmUsC4E5fI_c8mQygoavMxP0t3

# **Image Classification using Convolutional Neural Network on CIFAR10**

## **Import and Functions**
"""

import tensorflow as tf
from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt
import numpy as np
from sklearn.metrics import confusion_matrix, classification_report

"""## **Loading the Dataset and Preparation**"""

(X_train, y_train), (X_test, y_test) = datasets.cifar10.load_data()

X_train.shape, X_test.shape, y_train.shape, y_test.shape

y_train[:5]
# This is a 2D array, we'll change it into a 1D array for better use, as it's just labels.
y_train = y_train.reshape(-1, ) # Changing from 2D to 1D
# y_train[:5]

y_test[:5]
# same for y_test
y_test = y_test.reshape(-1, )
# y_test[:5]

classes = ["airplane", "automobile", "bird", "cat", "deer", "dog", "frog", "horse", "ship", "truck"]
# len(classes)

"""## **Viewing the Image Data and Preprocessing**"""

def plot_sample(X, y, index):
  plt.figure(figsize = (15, 2))
  plt.imshow(X[index])
  plt.xlabel(classes[y[index]])

# plot_sample(X_train, y_train, 0) # 0th index is a frog
# plot_sample(X_train, y_train, 1)

"""Normalizing the image ranges to 0 to 1, by dividing the whole array by 255."""

X_train = X_train/ 255.0
X_test = X_test/ 255.0

# X_train

"""## **Building an ANN for image classification**

Before building CNN, we'll see how ANN is doing.
"""

ANN = models.Sequential([
    layers.Flatten(input_shape = (32, 32, 3)),
    layers.Dense(3000, activation = "relu"),
    layers.Dense(1000, activation = "relu"),
    layers.Dense(10, activation = "softmax")
])

ANN.compile(optimizer = "SGD", loss = "sparse_categorical_crossentropy", metrics = ["accuracy"]) # sparse_categorical_crossentropy for labels in digits and not vectors
ANN.fit(X_train, y_train, epochs = 5)

y_pred = ANN.predict(X_test)
y_pred_classes = [np.argmax(element) for element in y_pred]

print("Classification Report: \n", classification_report(y_test, y_pred_classes))

"""## **Building a CNN**"""

CNN = models.Sequential([
    layers.Conv2D(filters = 32, kernel_size = (3, 3), activation = "relu", input_shape = (32, 32, 3)),
    layers.MaxPooling2D((2, 2)),

    layers.Conv2D(filters = 64, kernel_size = (3, 3), activation = "relu"),
    layers.MaxPooling2D((2, 2)),

    layers.Flatten(),
    layers.Dense(64, activation = "relu"),
    layers.Dense(10, activation = "softmax")
])

CNN.compile(optimizer = "adam", loss = "sparse_categorical_crossentropy", metrics = ["accuracy"])

CNN.fit(X_train, y_train, epochs = 10)

"""CNN performs better than ANN, and pooling layers help reduce the dimensions while preserving the nature of the model.

## **Testing**
"""

CNN.evaluate(X_test, y_test) # Hope it works out good :(

y_pred = CNN.predict(X_test)
y_pred[:5]

y_classes = [np.argmax(element) for element in y_pred]
y_classes[:5], y_test[:5]
plot_sample(X_test, y_test, 3)
classes[y_classes[3]] # Itni blurry image oh my god